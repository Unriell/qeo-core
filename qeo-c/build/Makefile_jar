## FILE: Makefile_jar
#
# Description: This Makefile will be included once for each jar defined in
# each component Makefile. It is responsible for generating the build commands
# for the jar files for which this Makefile was included.
#
# Input variables:
# - COMPONENT
# - JAR
# - $(COMPONENT).$(JAR)_MANIFEST 
# <TODO add more variables>
#

COMPONENT_SET := $(COMPONENT)

NEEDED_TOOLS+=ant

##< Find out if this jar is a test part, or a normal part
ifneq ($(filter $($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR).jar, $($(COMPONENT)_PARTS)),)
$(COMPONENT).$(JAR)_TEST:=0
else
ifneq ($(filter $($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR).jar, $($(COMPONENT)_TEST_PARTS)),)
$(COMPONENT).$(JAR)_TEST:=1
else
# Not listed as a test jar or a normal part. Assuming test (worst case).
$(COMPONENT).$(JAR)_TEST:=1
endif
endif
##>

#In case of a test component, extra elements dependencies.
#TODO: can this not be in cleaner way?
$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR).jar : JAR_COMPONENT:=$(COMPONENT)
ifeq ($($(COMPONENT).$(JAR)_TEST), 1)
$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR).jar : $($(COMPONENT)_PREFIX/)testclasses_unpacked
else
$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR).jar : $($(COMPONENT)_PREFIX/)mainclasses_unpacked
endif
	$(ant) -f $(projectdir/)build/ant/jar.xml \
	-Ddestfile=$@ \
	-Dmanifest="$($(patsubst %.jar,%,$(@F))_MANIFEST)" \
	-Dexcludes="$($(patsubst %.jar,%,$(@F))_EXCLUDES)" \
	-Dincludes="$($(patsubst %.jar,%,$(@F))_INCLUDES)" \
	-Dresources="$($(patsubst %.jar,%,$(@F))_RESOURCES)" \
	-Dresource.dir="$($(JAR_COMPONENT)_COMP_DIR/)resource" \
	-Dclass.dir="$(patsubst %_unpacked,%,$^)" 
ifneq ($($(COMPONENT).$(JAR)_TEST), 1)
ifeq ($(E),KLOCWORK)
	cp $<.kw $@.kw
endif
endif

$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-compile-src.jar : override COMPONENT:=$(COMPONENT)
$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-compile-src.jar : override JAR:=$(JAR)
$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-compile-src.jar : $($(COMPONENT)_PREFIX/)$(COMPONENT)-all-src.jar
	$(ant) -f $(projectdir/)build/ant/repackage.xml \
	-Ddestfile=$@ \
	-Dsrcfile=$< \
	-Dexcludes="$($(COMPONENT).$(JAR)_EXCLUDES)" \
	-Dincludes="$($(COMPONENT).$(JAR)_INCLUDES)"

#Default values for the TDW in- and excludes.
ifndef $(COMPONENT).$(JAR)_TDW_EXCLUDES
$(COMPONENT).$(JAR)_TDW_EXCLUDES:=
endif
ifndef $(COMPONENT).$(JAR)_TDW_INCLUDES
$(COMPONENT).$(JAR)_TDW_INCLUDES:=**
endif

$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-tdw.jar : override COMPONENT:=$(COMPONENT)
$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-tdw.jar : override JAR:=$(JAR)
$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-tdw.jar : $($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR).jar
	$(ant) -f $(projectdir/)build/ant/repackage.xml \
	-Ddestfile=$@ \
	-Dsrcfile=$< \
	-Dexcludes="$($(COMPONENT).$(JAR)_TDW_EXCLUDES)" \
	-Dincludes="$($(COMPONENT).$(JAR)_TDW_INCLUDES)" 

#Default values for the src in- and excludes.
ifndef $(COMPONENT).$(JAR)_SRC_EXCLUDES
$(COMPONENT).$(JAR)_SRC_EXCLUDES:=
endif
ifndef $(COMPONENT).$(JAR)_SRC_INCLUDES
$(COMPONENT).$(JAR)_SRC_INCLUDES:=**
endif

$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-src.jar : override COMPONENT:=$(COMPONENT)
$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-src.jar : override JAR:=$(JAR)
$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-src.jar : $($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-compile-src.jar
	$(ant) -f $(projectdir/)build/ant/repackage.xml \
	-Ddestfile=$@ \
	-Dsrcfile=$< \
	-Dexcludes="$($(COMPONENT).$(JAR)_SRC_EXCLUDES)" \
	-Dincludes="$($(COMPONENT).$(JAR)_SRC_INCLUDES)"

#Default values for the javadoc in- and excludes.
ifndef $(COMPONENT).$(JAR)_JAVADOC_EXCLUDES
$(COMPONENT).$(JAR)_JAVADOC_EXCLUDES:=
endif
ifndef $(COMPONENT).$(JAR)_JAVADOC_INCLUDES
$(COMPONENT).$(JAR)_JAVADOC_INCLUDES:=**
endif

$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-javadoc.jar : override COMPONENT:=$(COMPONENT)
$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-javadoc.jar : override JAR:=$(JAR)
$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-javadoc.jar : $($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-compile-src.jar $($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR).jar
	$(ant) -f $(projectdir/)build/ant/javadoc.xml \
	-Ddestfile=$@ \
	-Dsrcfile=$< \
	-Ddoc.title="$(COMPONENT).$(JAR)" \
	-Dclassjar="$($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR).jar" \
	-Dexcludes="$($(COMPONENT).$(JAR)_JAVADOC_EXCLUDES)" \
	-Dincludes="$($(COMPONENT).$(JAR)_JAVADOC_INCLUDES)" part_javadoc

.PHONY: $(COMPONENT)_$(E)_$(JAR)_java_tdw_install
ifneq ($($(COMPONENT).$(JAR)_TEST), 1)
#normal component
$(COMPONENT)_$(E)_$(JAR)_java_tdw_install : override COMPONENT:=$(COMPONENT)
$(COMPONENT)_$(E)_$(JAR)_java_tdw_install : override JAR:=$(JAR)
$(COMPONENT)_$(E)_$(JAR)_java_tdw_install : $($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-tdw.jar
$(COMPONENT)_$(E)_$(JAR)_java_tdw_install : $($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-src.jar
$(COMPONENT)_$(E)_$(JAR)_java_tdw_install : $($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-javadoc.jar
	mkdir -p $(DESTDIR)/$(COMPONENT)/$(JAR)
	cp $($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-tdw.jar $(DESTDIR)/$(COMPONENT)/$(JAR)/$(JAR).jar
	cp $($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-src.jar $(DESTDIR)/$(COMPONENT)/$(JAR)/$(JAR)-src.jar
	cp $($(COMPONENT)_PREFIX/)$(COMPONENT).$(JAR)-javadoc.jar $(DESTDIR)/$(COMPONENT)/$(JAR)/$(JAR)-javadoc.jar
	$(if $($(COMPONENT).$(JAR)_RESTRICT), echo '$($(COMPONENT).$(JAR)_RESTRICT)' > $(DESTDIR)/$(COMPONENT)/$(JAR)/$(JAR)-restrict.txt)

else
#test component, so do nothing
$(COMPONENT)_$(E)_$(JAR)_java_tdw_install :

endif

# Vim Modeline, used to enable folds on this Makefile
# vim: foldmethod=marker foldmarker=##<,##> :
