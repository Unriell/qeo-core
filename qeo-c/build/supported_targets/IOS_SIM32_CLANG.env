# The target architecture
TARG_ARCH            := HOST

# The target operating system
TARG_OS              := IOS

# The compiler family
COMPILER             := LLVM

# The root directory of your toolchain
TOOLCHAIN_DIR := /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/

# This environment can be used on i386-apple-darwin hosts
SUPPORTED_HOSTTYPES  := i386-apple-darwin

# The path to all toolchain commands
x86_64_Darwin_TOOLCHAIN := $(TOOLCHAIN_DIR)

# Lowercase definition of the architecture, as needed by configure, ... 
CONFIGURATION_NAME   := i386

# as passed to the compiler
ARCHITECTURE_NAME := $(CONFIGURATION_NAME)

# The endianness of the target architecture
E_ENDIAN             := LITTLE

# The size of a long on the target architecture
E_SIZEOF_LONG        := 4

E_SYSROOT_SDK := iPhoneSimulator
E_SYSROOT_TOP := /Applications/Xcode.app/Contents/Developer/Platforms/$(E_SYSROOT_SDK).platform/Developer/
ifneq (,$(findstring $(E_SYSROOT_SDK),$(SDKROOT)))
E_SYSROOT_PATH := $(SDKROOT) 
else
E_SYSROOT_PATH := $(subst iPhoneOS,$(E_SYSROOT_SDK),$(SDKROOT)) 
endif
E_SYSROOT_SDK_FULL := $(notdir $(E_SYSROOT_PATH))

# We do not have SuS/XSI IPC calls on iOS
# We don't strictly need this flag on the simulator but we prefer to have the same behaviour on the simulator as on the physical device
FEATURE_DEFINES := -DNOIPC


COMMON_CFLAGS := -D_DARWIN_C_SOURCE -arch $(ARCHITECTURE_NAME) $(FEATURE_DEFINES) --pipe -g -gdwarf-2 -isysroot $(E_SYSROOT_PATH) -miphoneos-version-min=7.0 
COMMON_LFLAGS := -arch $(ARCHITECTURE_NAME) -isysroot $(E_SYSROOT_PATH) -miphoneos-version-min=7.0 
# Flags passed to the compiler
#
# In case of debugging, we do not use garbage collection of sections and we do
# not enable code size optimization of code. -g is always passed, even if we
# are not compiling with DEBUG. The debug info is stripped off when installing
# the components. We did not see any notable degradation of code when -g was
# passed along with -Os. 
ifeq ($($(COMPONENT)_DEBUG),1)
  E_CFLAGS           := $(COMMON_CFLAGS) -O0
  E_CCFLAGS          := $(E_CFLAGS)
  E_LFLAGS           := $(COMMON_LFLAGS)
else
  E_CFLAGS           := $(COMMON_CFLAGS) -Os
  E_CCFLAGS          := $(E_CFLAGS)
  E_LFLAGS           := $(COMMON_LFLAGS)
endif

#iOS only supports static linking !
$(COMPONENT)_STATIC_LINK := 1

prefix=usr/local
bindir=$(prefix)/bin
libdir=$(prefix)/lib
datadir=$(prefix)/share
pkgconfigdir=$(prefix)/lib/pkgconfig
incdir=$(prefix)/include
sysconfdir=$(prefix)/etc

override $(E)_CC                           := $(TOOLCHAIN_DIR)clang
override $(COMPONENT)_$(E)_CC              := $($(E)_CC) $(E_CC_REQUIRED_OPTIONS)
override $(COMPONENT)_$(E)_CCC             := $($(E)_CC)++ $(E_CCC_REQUIRED_OPTIONS)
override $(COMPONENT)_$(E)_LINKER          := $($(E)_CC) $(E_CC_REQUIRED_OPTIONS)
